[TOC]





###FAQ

- java keystore uses keys in .der format (extensions can be .cer .crt etc).

- The .der format are not human readable, .pem format are human readaable (they use base 64 encoding)

- Exporting a key form keystore :-

  ```bash
  keytool -export -keystore charts/kafka/config/kafka.server.truststore.jks -alias caroot -file 1.cer
  ```

- Converting this .cer key into .pem format :-

  ```bash
  openssl x509 -inform der -in 1.cer -out 1.pem

  #cat 1.pem
  -----BEGIN CERTIFICATE-----
  MIIFVTCCAz2gAwIBAgIJAM5SSUY66HYXMA0GCSqGSIb3DQEBCwUAMEExFzAVBgNV
  ................
  ...........
  AcEzlxoCf34JkgbNtVsh1Rpy4uGbX9SoLg==
  -----END CERTIFICATE-----
  ```

- **Why to use trustcacerts option :-**

  When you import a certificate other than a self-signed root certificate (e.g. intermediate certificates), `keytool` tries to build and validate a proper certificate path first. 

  If you use the `trustcacerts` parameter, then for building the path, `keytool` will not only consider the certificates already contained in the trust store, but it will additionally consider the certificates contained in the `cacerts` key store (this file is located in the lib/security folder of your JRE installation). The certificates in `cacerts` are a kind of default trust list, the officially trusted root certificates (similar to the lists your browser trusts by default).

  The option is not really necessary since you can always force the import for a certificate. It also makes no sense when importing a self-signed root certificate, because no certificate path can be built in this situation - you either trust a root or you don't.

  But it may be a nice feature if you know that the imported certificate should be issued by one of the certificates contained in cacerts - `keytool` would warn you if it still could not build and validate an entire certificate path - which would most likely be a warning that something is not right with the certificate you tried to import. 

- ​

  ​

  ---

  ​

  ### Creating the Truststore and Keystore

  - [7.3.1.1. Creating Your Own Client and Server Certificates](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/deployment-ssl-stores.html#deployment-ssl-stores-own)
  - [7.3.1.2. Creating a Custom Certificate and Getting it Signed](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/deployment-ssl-stores.html#deployment-ssl-stores-own-signed)
  - [7.3.1.3. Using an existing Certificate](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/deployment-ssl-stores.html#deployment-ssl-stores-signed)
  - [7.3.1.4. Converting SSL Certificates for **keytool**](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/deployment-ssl-stores.html#deployment-ssl-stores-convert)

  **

  **

  **

  The SSL configuration works through two separate files that define the server and client side of the encryption configuration. Because individual hosts within a Tungsten Replicator configuration are both servers (when acting as a master, or when providing status information), and clients (when reading remote THL and managing nodes remotely), both the server and client side of the configuration must be configured.

  Configuration for all systems relies on two files, the `truststore`, which contains the server certificate information (the certificates it will accept from clients), and the `keystore` , which manages the client certificate information (the certificates that will be provided to servers). The truststore and keystore hold SSL certificate information, and are password protected.

  The keystore and truststore operate by holding one or more certificates that will be used for encrypting communication. The following certificate options are available:

  - Create your own server and client certificates
  - Create your own server certificates, get the server certificate signed by a Certificate Authority (CA), and use a corresponding signed client certificate
  - Use a server and client certificate already signed by a CA. Care should be taken with these certificates, as they are associated with specific domains and/or hosts, and may cause problems in a dynamic environment.

  In a multi-node environment such as Tungsten Replicator, all the hosts in the dataservice can use the same keystore and truststore certificates. The [**tpm**](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/cmdline-tools-tpm.html) command will distribute these files along with the configuration when a new installation is deployed, or when updating an existing deployment.

  #### 7.3.1.1. Creating Your Own Client and Server Certificates

  **

  Because the client and server components of the Tungsten Replicator configuration are the same, the same certificate can be used and add to both the keystore and truststore files.

  The process is as follows:

  1. Create the keystore and generate a certificate
  2. Export the certificate
  3. Import the certificate to the truststore

  To start, use the supplied **keytool** to create a keystore and populate it with a certificate. The process asks for certain information. The alias is the name to use for the server and can be any identifier. When asked for the first and last name, use `localhost`, as this is used as the server identifier for the certificate. The other information should be entered accordingly.

  Keystores (and truststores) also have their own passwords that are used to protect the store from updating the certificates. The password must be known as it is required in the configuration so that Tungsten Replicator can open the keystore and read the contents.

  ```bash
  shell> keytool -genkey -alias replserver -keyalg RSA -keystore keystore.jks
  Enter keystore password:  
  Re-enter new password: 
  What is your first and last name?
    [Unknown]:  localhost
  What is the name of your organizational unit?
    [Unknown]:  My OU
  What is the name of your organization?
    [Unknown]:  Continuent
  What is the name of your City or Locality?
    [Unknown]:  Mountain View   
  What is the name of your State or Province?
    [Unknown]:  CA
  What is the two-letter country code for this unit?
    [Unknown]:  US
  Is CN=My Name, OU=My OU, O=Continuent, L=Mountain View, ST=CA, C=US correct?
    [no]:  yes

  Enter key password for <any>
  	(RETURN if same as keystore password):
  ```

  The above process has created the keystore and the 'server' certificate, stored in the file `keystore.jks`.

  Alternatively, you can create a new certificate in a keystore non-interactively by specifying the passwords and certificate contents on the command-line:

  ```bash
  shell> keytool -genkey -alias replserver \
      -keyalg RSA -keystore keystore.jks \
      -dname "cn=localhost, ou=IT, o=Continuent, c=US" \
      -storepass password -keypass password
  ```

  Now you need to export the certificate so that it can be added to the truststore as the trusted certificate:

  ```bash
  shell> keytool -export -alias replserver -file client.cer -keystore keystore.jks
  Enter keystore password:  
  Certificate stored in file <client.cer>
  ```

  This has created a certificate file in `client.cer` that can now be used to populate your truststore. When added the certificate to the truststore, it must be identified as a trusted certificate to be valid. The password for the truststore must be provided. It can be the same, or different, to the one for the keystore, but must be known so that it can be added to the Tungsten Replicator configuration.

  ```bash
  shell> keytool -import -v -trustcacerts -alias replserver -file client.cer -keystore truststore.ts 
  Enter keystore password:  
  Re-enter new password: 
  Owner: CN=My Name, OU=My OU, O=Continuent, L=Mountain View, ST=CA, C=US
  Issuer: CN=My Name, OU=My OU, O=Continuent, L=Mountain View, ST=CA, C=US
  Serial number: 87db1e1
  Valid from: Wed Jul 31 17:15:05 BST 2013 until: Tue Oct 29 16:15:05 GMT 2013
  Certificate fingerprints:
  	 MD5:  8D:8B:F5:66:7E:34:08:5A:05:E7:A5:91:A7:FF:69:7E
  	 SHA1: 28:3B:E4:14:2C:80:6B:D5:50:9E:18:2A:22:B9:74:C5:C0:CF:C0:19
  	 SHA256: 1A:8D:83:BF:D3:00:55:58:DC:08:0C:F0:0C:4C:B8:8A:7D:9E:60:5E:C2:3D:6F:16:F1:B4:E8:C2:3C:87:38:26
  	 Signature algorithm name: SHA256withRSA
  	 Version: 3

  Extensions: 

  #1: ObjectId: 2.5.29.14 Criticality=false
  SubjectKeyIdentifier [
  KeyIdentifier [
  0000: E7 D1 DB 0B 42 AC 61 84   D4 2E 9A F1 80 00 88 44  ....B.a........D
  0010: E4 69 C6 C7                                        .i..
  ]
  ]

  Trust this certificate? [no]:  yes
  Certificate was added to keystore
  [Storing truststore.ts]
  ```

  This has created the truststore file, `truststore.ts`.

  A non-interactive version is available by using the `-noprompt` option and supplying the truststore name:

  ```bash
  shell> keytool -import -trustcacerts -alias replserver -file client.cer \
      -keystore truststore.ts -storepass password -noprompt
  ```

  The two files, the keystore (`keystore.jks`), and truststore (`truststore.ts`), along with their corresponding passwords can be now be used with [**tpm**](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/cmdline-tools-tpm.html) to configure the cluster. See [Section 7.3.3, “Configuring the Secure Service through **tpm**”](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/deployment-ssl-tpm.html).

  Show Copy-friendly Text

  #### 7.3.1.2. Creating a Custom Certificate and Getting it Signed

  **

  You can create your own certificate and get it signed by an authority such as VeriSign or Thawte. To do this, the certificate must be created first, then you create a certificate signing request, send this to your signing authority, and then import the signed certificate and the certificate authority certificate into your keystore and truststore.

  Create the certificate:

  ```bash
  shell> keytool -genkey -alias replserver -keyalg RSA -keystore keystore.jks
  Enter keystore password:  
  Re-enter new password: 
  What is your first and last name?
    [Unknown]:  localhost
  What is the name of your organizational unit?
    [Unknown]:  My OU
  What is the name of your organization?
    [Unknown]:  Continuent
  What is the name of your City or Locality?
    [Unknown]:  Mountain View   
  What is the name of your State or Province?
    [Unknown]:  CA
  What is the two-letter country code for this unit?
    [Unknown]:  US
  Is CN=My Name, OU=My OU, O=Continuent, L=Mountain View, ST=CA, C=US correct?
    [no]:  yes

  Enter key password for <any>
  	(RETURN if same as keystore password):
  ```

  Create a new signing request the certificate:

  ```bash
  shell> keytool -certreq -alias replserver -file certrequest.pem \
      -keypass  password -keystore keystore.jks -storepass password
  ```

  This creates a certificate request, `certrequest.pem`. This must be sent the to the signing authority to be signed.

  - *Official Signing*

    Send the certificate file to your signing authority. They will send a signed certificate back, and also include a root CA and/or intermediary CA certificate. Both these and the signed certificate must be included in the keystore and truststore files.

    First, import the returned signed certificate:

    ```bash
    shell> keytool -import -alias replserver -file signedcert.pem -keypass password \
        -keystore keystore.jks -storepass password
    ```

    Now install the root CA certificate:

    ```bash
    shell> keytool -import -alias careplserver -file cacert.pem -keypass password \
        -keystore keystore.jks -storepass password
    ```

    ### Note

    If the import of your certificate with **keytool** fails, it may be due to an incompatibility with some versions of OpenSSL, which fail to create suitable certificates for third-party tools. In this case, see [Section 7.3.1.4, “Converting SSL Certificates for **keytool**”](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/deployment-ssl-stores.html#deployment-ssl-stores-convert) for more information.

    And an intermediary certificate if you were sent one:

    ```bash
    shell> keytool -import -alias interreplserver -file intercert.pem -keypass password \
        -keystore keystore.jks -storepass password
    ```

    Now export the signed certificate so that it can be added to the truststore. Although you can import the certificate supplied, by exporting the certificate in your keystore for inclusion into your truststore you can ensure that the two certificates will match:

    ```bash
    shell> keytool -export -alias replserver -file client.cer -keystore keystore.jks
    Enter keystore password:  
    Certificate stored in file <client.cer>
    ```

    The exported certificate and CA root and/or intermediary certificates must now be imported to the truststore:

    ```bash
    shell> keytool -import -trustcacerts -alias replserver -file client.cer \
        -keystore truststore.ts -storepass password -noprompt
    shell> keytool -import -trustcacerts -alias careplserver -file cacert.pem \
        -keystore truststore.ts -storepass password -noprompt
    shell> keytool -import -trustcacerts -alias interreplserver -file intercert.pem \
        -keystore truststore.ts -storepass password -noprompt
    ```

  - *Self-Signing*

    If you have setup your own certificate authority, you can self-sign the request using **openssl**:

    ```bash
    shell> openssl ca -in certrequest.pem -out certificate.pem
    ```

    Convert the certificate to a plain PEM certificate:

    ```bash
    shell> openssl x509 -in certificate.pem -out certificate.pem -outform PEM
    ```

    Finally, for a self-signed certificate, you must combine the signed certificate with the CA certificate:

    ```bash
    shell> cat certificate.pem cacert.pem > certfull.pem
    ```

    This certificate can be imported into your keystore and truststore.

    To import your signed certificate into your keystore:

    ```bash
    shell> keytool -import -alias replserver -file certfull.pem -keypass password \
        -keystore keystore.jks -storepass password
    ```

    Then export the certificate for use in your truststore:

    ```bash
    shell> keytool -export -alias replserver -file client.cer -keystore keystore.jks
    Enter keystore password:  
    Certificate stored in file <client.cer>
    ```

    The same certificate must also be exported and added to the truststore:

    ```bash
    shell> keytool -import -trustcacerts -alias replserver -file client.cer \
        -keystore truststore.ts -storepass password -noprompt
    ```

  This completes the setup of your truststore and keystore. The files created can be used in your [**tpm**](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/cmdline-tools-tpm.html) configuration. See [Section 7.3.3, “Configuring the Secure Service through **tpm**”](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/deployment-ssl-tpm.html).

  Show Copy-friendly Text

  #### 7.3.1.3. Using an existing Certificate

  **

  If you have an existing certificate (for example with your MySQL, HTTP server or other configuration) that you want to use, you can import that certificate into your truststore and keystore. When using this method, you must import the signed certificate, and the certificate for the signing authority.

  When importing the certificate into your keystore and truststore, the certificate supplied by the certificate authority can be used directly, but must be imported alongside the certificate authorities root and/or intermediary certificates. All the certificates must be imported for the SSL configuration to work.

  The certificate should be in the PEM format if it is not already. You can convert to the PEM format by using the **openssl** tool:

  ```bash
  shell> openssl x509 -in signedcert.crt -out certificate.pem -outform PEM
  ```

  First, import the returned signed certificate:

  ```bash
  shell> keytool -import -file certificate.pem -keypass password \
      -keystore keystore.jks -storepass password
  ```

  ### Note

  If the import of your certificate with **keytool** fails, it may be due to an incompatibility with some versions of OpenSSL, which fail to create suitable certificates for third-party tools. In this case, see [Section 7.3.1.4, “Converting SSL Certificates for **keytool**”](https://pubs.vmware.com/continuent/tungsten-replicator-3.0/deployment-ssl-stores.html#deployment-ssl-stores-convert) for more information.

  Now install the root CA certificate:

  ```bash
  shell> keytool -import -file cacert.pem -keypass password \
      -keystore keystore.jks -storepass password
  ```

  And an intermediary certificate if you were sent one:

  ```bash
  shell> keytool -import -file intercert.pem -keypass password \
      -keystore keystore.jks -storepass password
  ```

  Now export the signed certificate so that it can be added to the truststore:

  ```bash
  shell> keytool -export -alias replserver -file client.cer -keystore keystore.jks
  Enter keystore password:  
  Certificate stored in file <client.cer>
  ```

  The exported certificate and CA root and/or intermediary certificates must now be imported to the truststore:

  ```bash
  shell> keytool -import -trustcacerts -alias replserver -file client.cer \
      -keystore truststore.ts -storepass password -noprompt
  shell> keytool -import -trustcacerts -alias replserver -file cacert.pem \
      -keystore truststore.ts -storepass password -noprompt
  shell> keytool -import -trustcacerts -alias replserver -file intercert.pem \
      -keystore truststore.ts -storepass password -noprompt
  ```

  Show Copy-friendly Text

  #### 7.3.1.4. Converting SSL Certificates for **keytool**

  **

  Some versions of the **openssl** toolkit generate certificates which are incompatible with the certificate mechanisms of third-party tools, even though the certificates themselves work fine with OpenSSL tools and libraries. This is due to a bug which affected certain releases of **openssl** 1.0.0 and later and the X.509 certificates that are created.

  This problem only affects self-generated and/or self-signed certificates generated using the **openssl** command. Officially signed certificates from Thawte, VeriSign, or others should be compatible with **keytool** without conversion.

  To get round this issue, the keys can be converted to a different format, and then imported into a keystore and truststore for use with Tungsten Replicator.

  To convert a certificate, use **openssl** to convert the X.509 into PKCS12 format. You will be prompted to enter a password for the generated file which is required in the next step:

  ```bash
  shell> openssl pkcs12 -export -in client-cert.pem -inkey client-key.pem >client.p12
  Enter Export Password:
  Verifying - Enter Export Password:
  ```

  To import the converted certificate into a keystore, specifying the destination keystore name, as well as the source PKCS12 password used in the previous step:

  ```bash
  shell> keytool -importkeystore -srckeystore client.p12 -destkeystore keystore.jks -srcstoretype pkcs12
  Enter destination keystore password:  
  Re-enter new password: 
  Enter source keystore password:  
  Entry for alias 1 successfully imported.
  Import command completed:  1 entries successfully imported, 0 entries failed or cancelled
  ```

  The same process can be used to import server certificates into truststore, by converting the server certificate and private key:

  ```bash
  shell> openssl pkcs12 -export -in server-cert.pem -inkey server-key.pem >server.p12
  Enter Export Password:
  Verifying - Enter Export Password:
  ```

  Then importing that into a truststore

  ```bash
  shell> keytool -importkeystore -srckeystore server.p12 -destkeystore truststore.ts -srcstoretype pkcs12
  Enter destination keystore password:  
  Re-enter new password: 
  Enter source keystore password:  
  Entry for alias 1 successfully imported.
  Import command completed:  1 entries successfully imported, 0 entries failed or cancelled
  ```

  For official CA certificates, the generated certificate information should be valid for importing using **keytool**, and this file should not need conversion.



#### How to find whether a certificate is self signed or signed by an CA ?

If the subject and issuer are the same, it is self-signed; if they are different, then it was signed by a CA. (Strictly speaking, a great many self-signed certificates are *also* signed by a CA -- themselves.)

compare the issuer and subject. If they are same, it is self signed

```
openssl x509 -in cert.pem -inform PEM -noout -subject -issuer
```



#### verify whether a certificate is signed by ca

```
openssl verify -verbose -CAfile <(cat Intermediate.pem RootCert.pem) UserCert.pem

```

------

Update:

As Greg Smethells points out in the comments, **this command implicitly trusts Intermediate.pem**. I recommend reading the first part of [the post Greg references](https://mail.python.org/pipermail/cryptography-dev/2016-August/000676.html) (the second part is specifically about pyOpenSSL and not relevant to this question).

In case the post goes away I'll quote the important paragraphs:

> Unfortunately, an "intermediate" cert that is actually a root / self-signed  *will be treated as a trusted CA* when using the recommended command given  above:
>
> $ openssl verify -CAfile <(cat geotrust_global_ca.pem rogue_ca.pem)  fake_sometechcompany_from_rogue_ca.com.pem  fake_sometechcompany_from_rogue_ca.com.pem: OK

It seems openssl will stop verifying the chain as soon as a root certificate is encountered, which may also be Intermediate.pem if it is self-signed. In that case RootCert.pem is not considered. So make sure that Intermediate.pem is coming from a trusted source before relying on the command above.

#### To check quickly if the server keystore and truststore are setup properly you can run the following command

```
openssl s_client -debug -connect localhost:9093 -tls1
```

(Note: TLSv1 should be listed under ssl.enabled.protocols)

In the output of this command you should see server's certificate:

```
            -----BEGIN CERTIFICATE-----
            {variable sized random bytes}
            -----END CERTIFICATE-----
            subject=/C=US/ST=CA/L=Santa Clara/O=org/OU=org/CN=Sriharsha Chintalapani
            issuer=/C=US/ST=CA/L=Santa Clara/O=org/OU=org/CN=kafka/emailAddress=test@test.com
```

If the certificate does not show up or if there are any other error messages then your keystore is not setup properly.



#### import a private key and certificate in java keystore

From time to time you have to update your SSL keys and certificates. In some cases you may have a mixed infrastructure e.g. "normal" http servers and tomcat or other java based servers. In the latter case you'll have to import your shiny new certificate and key into your java keystore.

##### The Keysotre

There are several methods that you can use but I found the following the most simple:

1. Export your key, certificate and ca-certificate into a PKCS12 bundle via

```bash
% openssl pkcs12 -export -in my.crt -inkey my.key -chain -CAfile my-ca-file.crt -name "my-domain.com" -out my.p12
```

1. **Be sure to set an export password!** (see further below for an explanation)
2. If you get the following error message **"Error unable to get issuer certificate getting chain."** then you should concatenate the openssl ca-certs with your own ca-cert into one file and use that as parameter for `-CAfile`. Example:

```bash
% cat /etc/ssl/cert.pem my-ca-file.crt > ca.crt
% openssl pkcs12 -export -in cert1.pem -inkey key.pem -chain -CAfile ca.crt -out mykeystore.p12 -passout pass:abc123
```

1. Import the PKCS12 file into a new java keystore via

```bash
% keytool -importkeystore -srckeystore mykeystore.p12 -srcstoretype PKCS12 -srcstorepass abc123 -destkeystore mykeystore.jks -deststorepass abc123 -destkeypass xyz123 -deststoretype JKS
```

##### The Truststore

1. create a pkcs12 store and then import that truststore using `keytool -importkeystore`

```bash
% openssl pkcs12 -export -in my.crt -chain -CAfile my-ca-file.crt -name "my-domain.com" -out my.p12
```

2. export the certificate as DER and then import it into the truststore

```bash
openssl x509 -in cert.pem -out cert.der -outform der
keytool -importcert -alias mycert -file cert.der \
  -keystore truststore.jks \
  -storepass password
```



#### creating an empty JKS and importing your private key into empty JKS

```bash
keytool -genkeypair -keyalg $KEY_TYPE -keysize $KEY_SIZE -noprompt -alias $keytool_alias -keypass $KEY_PASSWORD \
-keystore $server_keystore -storepass $KEYSTORE_PASSWORD -dname "$DISTINGUISHED_NAME"
```

```bash
keytool -delete -alias $keytool_alias -keystore $server_keystore
```

```bash
keytool -v -importkeystore -srckeystore eneCert.pkcs12 -srcstoretype PKCS12 -destkeystore keystore.ks -deststoretype JKS
```



#### creating self signed certificates with openssl

```bash
openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem -subj "/C=IN/ST=KA/L=BLR/O=ORCL/OU=pass-idc/CN=kafka-server.in.oracle.com"
```

You can also add `-nodes` if you don't want to protect your private key with a passphrase, otherwise it will prompt you for "at least a 4 character" password. The days parameter (365) you can replace with any number to affect expiration date. It will then prompt you for things like "Country Name" but you can just hit enter and accept defaults.

The `-x509` option tells `req` to create a self-signed cerificate. The `-days 365` option specifies that the certificate will be valid for 365 days. A temporary CSR is generated to gather information to associate with the certificate.

SSL has been around for long enough you'd think that there would be agreed upon container formats. And you're right, there are. Too many standards as it happens. So this is what I know, and I'm sure others will chime in.

- **.csr** This is a Certificate Signing Request. Some applications can generate these for submission to certificate-authorities. The actual format is PKCS10 which is defined in [RFC 2986](https://tools.ietf.org/html/rfc2986). It includes some/all of the key details of the requested certificate such as subject, organization, state, whatnot, as well as the *public key* of the certificate to get signed. These get signed by the CA and a certificate is returned. The returned certificate is the public *certificate* (which includes the public key but not the private key), which itself can be in a couple of formats.
- **.pem** Defined in RFC's [1421](https://tools.ietf.org/html/rfc1421) through [1424](https://tools.ietf.org/html/rfc1424), this is a container format that may include just the public certificate (such as with Apache installs, and CA certificate files `/etc/ssl/certs`), or may include an entire certificate chain including public key, private key, and root certificates. Confusingly, it may also encode a CSR (e.g. as used [here](https://jamielinux.com/docs/openssl-certificate-authority/create-the-intermediate-pair.html)) as the PKCS10 format can be translated into PEM. The name is from [Privacy Enhanced Mail (PEM)](https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail), a failed method for secure email but the container format it used lives on, and is a base64 translation of the x509 ASN.1 keys.
- **.key** This is a PEM formatted file containing just the private-key of a specific certificate and is merely a conventional name and not a standardized one. In Apache installs, this frequently resides in `/etc/ssl/private`. The rights on these files are very important, and some programs will refuse to load these certificates if they are set wrong.
- **.pkcs12 .pfx .p12** Originally defined by RSA in the [Public-Key Cryptography Standards](https://en.wikipedia.org/wiki/PKCS)(abbreviated PKCS), the "12" variant was originally enhanced by Microsoft, and later submitted as [RFC 7292](https://tools.ietf.org/html/rfc7292). This is a passworded container format that contains both public and private certificate pairs. Unlike .pem files, this container is fully encrypted. Openssl can turn this into a .pem file with both public and private keys: `openssl pkcs12 -in file-to-convert.p12 -out converted-file.pem -nodes`

A few other formats that show up from time to time:

- **.der** A way to encode ASN.1 syntax in binary, a .pem file is just a Base64 encoded .der file. OpenSSL can convert these to .pem (`openssl x509 -inform der -in to-convert.der -out converted.pem`). Windows sees these as Certificate files. By default, Windows will export certificates as .DER formatted files with a different extension. Like...
- **.cert .cer .crt** A .pem (or rarely .der) formatted file with a different extension, one that is recognized by Windows Explorer as a certificate, which .pem is not.
- **.p7b .keystore** Defined in [RFC 2315](https://tools.ietf.org/html/rfc2315) as PKCS number 7, this is a format used by Windows for certificate interchange. Java understands these natively, and often uses `.keystore` as an extension instead. Unlike .pem style certificates, this format has a *defined* way to include certification-path certificates.
- **.crl** A certificate revocation list. Certificate Authorities produce these as a way to de-authorize certificates before expiration. You can sometimes download them from CA websites.

------

In summary, there are four different ways to present certificates and their components:

- **PEM** Governed by RFCs, it's used preferentially by open-source software. It can have a variety of extensions (.pem, .key, .cer, .cert, more)
- **PKCS7** An open standard used by Java and supported by Windows. Does not contain private key material.
- **PKCS12** A Microsoft private standard that was later defined in an RFC that provides enhanced security versus the plain-text PEM format. This can contain private key material. It's used preferentially by Windows systems, and can be freely converted to PEM format through use of openssl.
- **DER** The parent format of PEM. It's useful to think of it as a binary version of the base64-encoded PEM file. Not routinely used by much outside of Windows.

#### generate a random password in bash

```bash
rand=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo;)
```



```
#!/bin/bash

CAHOME=~/.my-own-CA

if [ "$1" = "" ]
then

echo Creating the CA...

# Note, if $CAHOME exists, will over write...
mkdir -p $CAHOME


# Generate root CA key
openssl genrsa -out $CAHOME/rootCA.key 2048

# Create an X.509 cert from the CA key
openssl req -x509 -sha256 -nodes -days 1024 -newkey rsa:2048 -key $CAHOME/rootCA.key -out $CAHOME/rootCA.crt

# Create a password protected PFX file, useful for importing, moving around, etc.
openssl pkcs12 -export -out $CAHOME/rootCA.pfx -inkey $CAHOME/rootCA.key -in $CAHOME/rootCA.crt

ls -alF $CAHOME


else

echo Creating a cert from CA...


# Generate user key
openssl genrsa -out "$1.key" 2048

# Create certificate request
openssl req -new -key "$1.key" -out "$1.csr"

# Sign and generate the user certificate from the
openssl x509 -req -in "$1.csr" -CA $CAHOME/rootCA.crt -CAkey $CAHOME/rootCA.key -CAcreateserial -out "$1.crt" -days 500

echo
echo You should probably pick a password rather than leaving it blank...

# Export as password protected PFX file
openssl pkcs12 -export -out "$1.pfx" -inkey "$1.key" -in "$1.crt"

fi
```




#### For my project ..

##### 1. create  a private key and CSR

```bash
openssl req -newkey rsa:2048 -nodes -keyout kafka-server-rsa.key -out kafka-server-rsa.csr -subj "/C=IN/ST=KA/L=BLR/O=ORCL/OU=pass-idc/CN=kafka-server.example.com"
```

##### 2. View csr entries 

```bash
openssl req -text -noout -verify -in kafka-server-rsa.csr
```

##### 3.  Sign the CSR with a self signed CA to get the sgned certificate.

```bash
openssl x509 -req -in kafka-server-rsa.csr -CA ../charts/kafka/config/ca-cert-rsa -CAkey ../charts/kafka/config/ca-key-rsa -days 365 -CAcreateserial -out kafka-server-rsa.crt
```

##### 4. Import server.key, server.crt(signed) and ca.crt in JKS

```bash
export KEYSTORE_PASS=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo;)
export KEY_PASS=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo;)
export TRUSTSTORE_PASS=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo;)

openssl pkcs12 -export -in kafka-server-rsa.crt -inkey kafka-server-rsa.key -chain -CAfile ../charts/kafka/config/ca-rsa.crt -out kafka.server.keystore.p12 -passout pass:$KEYSTORE_PASS -name "kafka-cert"

keytool -importkeystore -srckeystore kafka.server.keystore.p12 -srcstoretype PKCS12 -srcstorepass ${KEYSTORE_PASS} -destkeystore kafka.server.keystore.jks -deststorepass ${KEYSTORE_PASS} -destkeypass ${KEY_PASS} -deststoretype JKS -alias "kafka-cert" -noprompt

```

##### 5. Import ca.crt in Java truststore

```bash
openssl x509 -in ../charts/kafka/config/ca-rsa.crt -out ca-rsa.der -outform der

keytool -importcert -alias ca-cert -file ca-rsa.der -keystore kafka.server.truststore.jks -storepass $TRUSTSTORE_PASS -noprompt
```

